#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.ensemble import RandomForestClassifier

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session


# In[ ]:


data = pd.read_csv("../input/factors-affecting-campus-placement/Placement_Data_Full_Class.csv")
data.head()


# *columns which contain categorical data*

# In[ ]:


print(data.shape)
cat_cols = ["gender", "ssc_b", "hsc_b", "hsc_s", "degree_t", "workex", "specialisation"]


# *Filling NaN values*

# In[ ]:


data = data.fillna(0)
data.isna().sum()


# *Changing dtypes from object to category*

# In[ ]:


print("before\n",data.dtypes)
for col in cat_cols:
    data[col] = data[col].astype("category")
print("after\n\n", data.dtypes)


# *Label encoding the category columns and then looking at the data*

# In[ ]:


le = LabelEncoder()
for cal in cat_cols:
    data[cal] = le.fit_transform(data[cal])
data.head()


# *Dividing data into X and y.Dropped few columns due to data leakage and target leakage. Basically here salary column is causing target leakage because those who are not placed (0) have salary (0).*

# In[ ]:


X = data.drop(["sl_no","status","salary"], axis=1)
y = le.fit_transform(data["status"])


# *Train test spilt*

# In[ ]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# *Using RandomForestClassifier to train the model.*

# In[ ]:


clf = RandomForestClassifier()
clf.fit(X_train, y_train)
pred = clf.predict(X_test)
print("Decision Tree Accuracy", accuracy_score(y_test, pred) * 100,"%")
print("Importance of Features", clf.feature_importances_ * 100)


# ## Important Features in Placement are plotted below according to their importance generated by RandomTreeClassifier.

# In[ ]:


importance = clf.feature_importances_
tot=0
for i,v in enumerate(importance):
    print('Feature: %0s, Score: %.5f' % (X.columns[i],v))
    tot=tot+v
print(tot)

plt.xlabel('Feature')
plt.ylabel('Degree of Importance')
plt.bar(X.columns, importance)
plt.xticks(rotation=90)
plt.show()


# In[ ]:




