#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

from subprocess import check_output
print(check_output(["ls", "../input"]).decode("utf8"))

# Any results you write to the current directory are saved as output.


# ## Load the data
# 
# The `events.csv` file is the join info between visitors and actions that they may perform on items.
# 
# The `item_properties*` are two files that hold attribtues of the items.
# 
# The `category_tree.csv` ... TODO

# In[ ]:


events = pd.read_csv('../input/events.csv').sort_values('timestamp')
print(events.shape)
events.head()


# In[ ]:


item_props = pd.concat([
    pd.read_csv('../input/item_properties_part1.csv'),
    pd.read_csv('../input/item_properties_part2.csv'),
])
print(item_props.shape)
item_props.head()


# ## First take a closer look at the events
# 
# The events holds a simple join table between the id of a person (visitor) and the id of an item
# that they are doing something to. 

# In[ ]:


print('{} event types\n{} visitors\n{} transactions\n{} items'.format(
    events.event.unique().shape[0],
    events.visitorid.unique().shape[0],
    (~events.transactionid.isnull()).sum(),
    events.itemid.unique()[0],
))


# In[ ]:


events.event.value_counts()


# ## Looking at distributions of users and items for each event type
# 
# For each of the 3 event types let's get a feel for how many of each type there are, how many users make it to each,
# and how many items are in each type

# In[ ]:


class EventContainer:
    def __init__(self, _events):
        self.events = _events
        self.view_events = _events[_events.event == 'view']
        self.transaction_events = _events[_events.event == 'transaction']
        self.addtocart_events = _events[_events.event == 'addtocart']
ec = EventContainer(events)


# In[ ]:


print('how many items are there total?')
ec.events.itemid.value_counts().describe()


# In[ ]:


print('how many items are there for view events only?')
ec.view_events.itemid.value_counts().describe()


# In[ ]:


print('how many items are there for addtocart events?')
ec.addtocart_events.itemid.value_counts().describe()


# In[ ]:


print('how many items were part of transaction events?')
ec.transaction_events.itemid.value_counts().describe()


# In[ ]:


print('how many visitors are there total?')
ec.events.visitorid.value_counts().describe()


# In[ ]:


print('how many visitors performed view events?')
ec.view_events.visitorid.value_counts().describe()


# In[ ]:


print('how many vistors performed addtocart events?')
ec.addtocart_events.visitorid.value_counts().describe()


# In[ ]:


print('how many visitors performed transaction events?')
ec.transaction_events.visitorid.value_counts().describe()


# ## Patterns in most frequently purchased items

# In[ ]:


print('get some of the purchased items')
most_common = ec.transaction_events.itemid.value_counts()
most_common.describe()


# In[ ]:


index = 0
item_id = most_common.index[index]
events_for_item = ec.events[ec.events.itemid == item_id]
purchase_events_for_item = events_for_item[events_for_item.event == 'transaction']
purchase_visitorids = set(purchase_events_for_item.visitorid.unique())
events_in_common = ec.events[ec.events.visitorid.isin(purchase_visitorids)]

print('item {} was purchased {} times and was in {} events'.format(
    item_id,    
    most_common.values[index],
    events_for_item.shape[0],
))

print('{} users purchased this item'.format(
    events_for_item.visitorid.unique().shape[0]
))

print('{} total events generated by all users who purchased item'.format(
    events_in_common.shape[0]
))


# In[ ]:


# Not really sure where to go from here...


# In[ ]:


# Get all events for all users that purchased this item


# In[ ]:


events_in_common.shape


# In[ ]:


events_for_item.visitorid.unique().shape[0]


# ## Now let's take a look at the item attributes
# 

# In[ ]:


print('{} unique properties'.format(
    item_props.property.unique().shape[0]
)


# In[ ]:


item_props.value.value_counts()[0:50]


# In[ ]:


def _null_if_not_string(val):
    try:
        float(val)
        return None
    except ValueError:
        return val
pd.Series(item_props.property.unique()).map(_null_if_not_string).unique()


# In[ ]:


value_counts = item_props.property.value_counts()


# In[ ]:


print('{} are for categoryid\n{} are for available'.format(
    value_counts.categoryid,
    value_counts.available
))


# In[ ]:





# In[ ]:




