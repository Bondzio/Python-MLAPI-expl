# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJnBZW8kQTLgSGWii-E158Gvk1NydiCt
"""

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import recall_score, roc_auc_score, f1_score
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report, confusion_matrix

"""
We can do three thing with this script. there are three function into this script.
Script file name: modelTrainAndEvaluated.py

datasplittingand_standardScaler: It split data into train & test and StandardScale features of train and test. And return StandardScaler data for train, StandardScaler data for test, target label for train and target label for test.

modeltrainingand_predict: It train first the model, then predict target and return predition of test data and predict in probability of test data.

evaluatewithConfusionMatrix: It print four things, "ROC-AUC score of the model", "Accuracy of the model", "Classification report" and "Confusion matrix".
"""
"""# Function"""

def data_splitting_and_standardScaler(X,Y,test_size,random_state):

  """
    X : all features columns without target label into 'X'
    Y : pass the target label 
    test_size: declar your expected test size
    random_state: declar your expected random_state
  """

  xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=test_size, random_state=0) 

  mms = StandardScaler()
  mms.fit(xtrain)
  xtrain_scaled = mms.transform(xtrain)
  xtest_scaled = mms.transform(xtest)

  return xtrain_scaled, xtest_scaled, ytrain, ytest # return StandardScaler data for train, StandardScaler data for test, target label for train and target label for test

def model_training_and_predict(model, xtrain_scaled, xtest_scaled, ytrain):

  """
    model: pass the model function name, as example - 'lightgbm.LGBMClassifier', 'RandomForestClassifier' etc.
    xtrain_scaled: pass Standarized train data all features columns without target label into 'X'
    xtest_scaled: Standarized test data all features columns without target label into 'X'
    ytrain: pass the target label of train data 
  """ 
  clf = model() 
  clf.fit(xtrain_scaled, ytrain)
  ypred = clf.predict(xtest_scaled)
  ypred_proba = clf.predict_proba(xtest_scaled) # retrun predict the probability

  return ypred, ypred_proba # return predition of test data and predict in probability of test data

def evaluate_with_ConfusionMatrix(ytest, ypred, ypred_proba = None):
  
  """
    ypred: pass the predition of test data 
    ypred_proba: pass the prediction in probability of test data
    ytest: pass the target label of test data 
  """ 
  if ypred_proba is not None:
      print('ROC-AUC score of the model: {}'.format(roc_auc_score(ytest, ypred_proba[:, 1])))
  print('Accuracy of the model: {}\n'.format(accuracy_score(ytest, ypred)))
  print('Classification report: \n{}\n'.format(classification_report(ytest, ypred)))
  print('Confusion matrix: \n{}\n'.format(confusion_matrix(ytest, ypred)))