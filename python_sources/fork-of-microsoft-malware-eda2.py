#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
Path = "../input/"

C = ['MachineIdentifier', 'ProductName', 'EngineVersion', 'AppVersion',
       'AvSigVersion', 'IsBeta', 'RtpStateBitfield', 'IsSxsPassiveMode',
       'DefaultBrowsersIdentifier', 'AVProductStatesIdentifier',
       'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm',
       'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier',
       'GeoNameIdentifier', 'LocaleEnglishNameIdentifier', 'Platform',
       'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease',
       'OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'PuaMode',
       'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable',
       'Census_MDC2FormFactor', 'Census_DeviceFamily',
       'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',
       'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier',
       'Census_ProcessorModelIdentifier', 'Census_ProcessorClass',
       'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',
       'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive',
       'Census_TotalPhysicalRAM', 'Census_ChassisTypeName',
       'Census_InternalPrimaryDiagonalDisplaySizeInInches',
       'Census_InternalPrimaryDisplayResolutionHorizontal',
       'Census_InternalPrimaryDisplayResolutionVertical',
       'Census_PowerPlatformRoleName', 'Census_InternalBatteryType',
       'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion',
       'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber',
       'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName',
       'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier',
       'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName',
       'Census_IsPortableOperatingSystem', 'Census_GenuineStateName',
       'Census_ActivationChannel', 'Census_IsFlightingInternal',
       'Census_IsFlightsDisabled', 'Census_FlightRing',
       'Census_ThresholdOptIn', 'Census_FirmwareManufacturerIdentifier',
       'Census_FirmwareVersionIdentifier', 'Census_IsSecureBootEnabled',
       'Census_IsWIMBootEnabled', 'Census_IsVirtualDevice',
       'Census_IsTouchEnabled', 'Census_IsPenCapable',
       'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',
       'Wdft_RegionIdentifier', 'HasDetections']


# 1. **Processing Train **

# In[ ]:


#List_train.append(pd.read_csv(Path+"train.csv", usecols = [C[-1]] ))


# In[ ]:


List_train =[]
List_test =[]
for i in tqdm(C[:-1]):
    List_train.append(pd.read_csv(Path+"train.csv", usecols = [i] ))
    List_test.append(pd.read_csv(Path+"test.csv", usecols = [i] ))
target =    pd.read_csv(Path+"train.csv", usecols = [C[-1]] )
target.to_csv('target.csv')

List_unique_train = []
List_unique_test = []
List_dtype_train =[]
List_dtype_test =[]

for i,j in tqdm(zip(List_train, List_test)):
    List_unique_train.append(i.nunique()[0])
    List_unique_test.append(j.nunique()[0])
    List_dtype_train.append(i.dtypes.values[0])
    List_dtype_test.append(j.dtypes.values[0])

summary = pd.DataFrame(index = C[:-1])

#pd.DataFrame(List_unique).T.fillna(0).sum(axis = 1).rename('Unique_Count')
#pd.DataFrame(List_dtype)

summary['Unique_count_train'] = List_unique_train
summary['Unique_count_test'] = List_unique_test
summary['Data_type_train'] = List_dtype_train

summary['Data_type_test'] = List_dtype_test

summary.to_csv('summary.csv')


# In[ ]:


empty_list =[]
for i,j in tqdm(zip(List_train[1:], List_test[1:])):
    temp1 = i.squeeze().value_counts()
    temp2 = j.squeeze().value_counts()
    index_all = set(temp1.index).union(set(temp2.index))
    temp_df = pd.DataFrame(index = index_all)
    temp_df['train_count'] = temp1
    temp_df['test_count'] = temp2
    temp_df['Name'] = i.columns[0]
    empty_list.append(temp_df)
    #temp_df.to_csv(str(i.columns[0])+'.csv')
    
appended = pd.concat(empty_list, axis =0)
appended.to_csv("Appended.csv")
appended.to_excel('Appended.xlsx', engine='xlsxwriter')
    


# In[ ]:


len(appended)


# In[ ]:


appended.head()


# In[ ]:


List_train.append(pd.read_csv(Path+"train.csv", usecols = [C[-1]] ))


# In[ ]:


list_columns = list(map(lambda x:x.columns[0], List_train))
Dict = dict(zip(list_columns, List_train))

List_distribution =[]

for i in tqdm(C[1:-1]):
    gbo = pd.concat([Dict[i] ,List_train[-1]], axis = 1).groupby(i)
    temp = gbo.mean()
    temp['total_count'] = gbo.count()
    temp['ones'] = temp['HasDetections']*temp['total_count']
    temp['zeros'] = temp['total_count'] - temp['ones']
    temp['var_name'] = i
    List_distribution.append(temp)

distributions_consolidated = pd.concat(List_distribution, axis = 0)

distributions_consolidated.to_excel('all_consolidation.xlsx', engine='xlsxwriter')


# In[ ]:


len(distributions_consolidated)


# In[ ]:


distributions_consolidated.head()


# In[ ]:


#List_train[-1]


# In[ ]:


#summary = pd.DataFrame(index = C[:-1])
#print(summary)

