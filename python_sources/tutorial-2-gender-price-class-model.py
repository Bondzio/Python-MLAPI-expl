# Tutorial 2: Gender Based Model (0.76555) - by Myles O'Neill
import numpy as np
import pandas as pd
import pylab as plt

# (1) Import the Data into the Script
train = pd.read_csv("../input/train.csv", dtype={"Age": np.float64}, )
test = pd.read_csv("../input/test.csv", dtype={"Age": np.float64}, )

# (2) Create the submission file with passengerIDs from the test file
submission = pd.DataFrame({"PassengerId": test['PassengerId'], "Survived": pd.Series(dtype='int32')})

# (3) 

# Set Fare Ceiling for bucketing
fare_ceiling = 40
train.Fare = [(fare_ceiling - 1.0) if x >= fare_ceiling else x for x in train['Fare']]

# Calculate Price Brackets and Classes
fare_bracket_size = 10
number_of_price_brackets = int(fare_ceiling / fare_bracket_size)
number_of_classes = len(np.unique(train['Pclass']))

# Create a reference matrix to show proporition of survivorss as a sorted table of gender/class/fare
survival_table = np.zeros([2,number_of_classes,number_of_price_brackets],float)

for i in range(number_of_classes):
    for j in range(number_of_price_brackets):
        women_only_stats = train [ (train['Sex'] == "female") \
                                & (train['Pclass'].astype(np.float) == i+1) \
                                & (train['Fare'].astype(np.float) >= j*fare_bracket_size) \
                                & (train['Fare'].astype(np.float) < (j+1)*fare_bracket_size), 1]
#                                
#        men_only_stats = train [ (train['Sex'] != "female") \
#                                & (train['Pclass'].astype(np.float) == i+1) \
#                                & (train['Fare'].astype(np.float) >= j*fare_bracket_size) \
#                                & (train['Fare'].astype(np.float) < (j+1)*fare_bracket_size), 1]        
        
#        survival_table[0,i,j] = np.mean(women_only_stats.astype(np.float)) #female stats
#        survival_table[1,i,j] = np.mean(men_only_stats.astype(np.float)) #male stats

#convert NaN to 0 (NaN generated by division by 0 during comparison)
#survival_table[survival_table != survival_table] = 0.

# (4) Create final submission file
submission.to_csv("submission.csv", index=False)