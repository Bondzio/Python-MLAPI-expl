#!/usr/bin/env python
# coding: utf-8

# The filename of the recordings includes several types of information that can be used to enhance classification results. We will demonstrate that by appending the timestamp of the event improves the classification accuracy. Other types of information such as temperature, humidity and several others that are not included in this dataset, such as, GPS coordinates, illumination, barometric readings can be treated likewise.
# The hour of the event is important because mosquitoes follow the so called circadian clock meaning they are not equally active all hours of the day. Different species may have different circadian rhythm.
# Temperature is also another important factor as mosquitoes are ectothermic and increase their wingbeat frequency with increasing temperature. Finaly GPS coordinates are also important in a global scale classification task as not all species co-exist in a specific geographical location.
# As we show below, this information can be naturally be included in the context of random forests and Gradient Boosting framework.

# In[ ]:


from __future__ import division
import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from scipy import signal
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import librosa
import xgboost


# Load all recordings, derive their Power Spectral Density (PSD). This may take a while

# In[ ]:


target_names = ['Ae. aegypti', 'Ae. albopictus', 'An. gambiae', 'An. arabiensis', 'C. pipiens', 'C. quinquefasciatus']

X = [] # will hold PSDs of the recs
X_names = [] # will hold the full path and the filename of all recs
y = [] # the labels
target_count = []

for i, target in enumerate(target_names):
    target_count.append(0)
    #path = './Wingbeats/' + target + '/'
    path = '../input/Wingbeats/Wingbeats/' + target + '/'
    for [root, dirs, files] in os.walk(path, topdown = False):
        for filename in files:
            name,ext = os.path.splitext(filename)
            if ext == '.wav':
                name = os.path.join(root, filename)
                data, fs = librosa.load(name, sr = 8000)
                y.append(i)
                X.append([10*np.log10(signal.welch(data, fs=fs, window='hanning', nperseg=256, noverlap=128+64)[1])])
                X_names.append(name)
                target_count[i]+=1

    print (target, '#recs = ', target_count[i])

print ('total #recs = ', len(y))


# Lets extract the hour from the filename and derive hourly activity.

# In[ ]:


names = pd.DataFrame(X_names, columns=['name'])
PSDs = pd.DataFrame(X, columns=['PSD'])
df = pd.concat([names, PSDs], axis = 1)
df['filename'] = df['name'].str.extract('([F]\w{0,})',expand=True)
df['species'] = df['name'].str.split('/').str.get(4)
df['hour'] = df.filename.str.extract('([_]\w{0,2})',expand=True)
df['hour'] = df.hour.str.split('_',expand=True)[1].astype(int)

# get hourly activity of all available species 
df1 = df[['species','hour']]
df1.groupby('species').plot.kde(xlim=(0,23))
plt.show()
df1.groupby('species').describe()

plt.figure(figsize=(20,10))
g = sns.boxplot(x="species", y="hour",data=df1)
g.set_xticklabels(g.get_xticklabels(),rotation=20)
plt.title('Species activity vs. Hour: 0-23')
plt.show() 

plt.figure(figsize=(20,10))
g = sns.violinplot(x="species", y="hour", data=df1, hue = 'species');
plt.legend(loc = 'lower center')
plt.title('Species activity vs. Hour: 0-23')
plt.show()


# Now lets try to classify a hold out set without using any metadata

# In[ ]:


df, y = shuffle(df, y, random_state = 2018)
df_train, df_test, y_train, y_test = train_test_split(df, y, stratify = y, test_size = 0.20, random_state = 2018)

X_train = np.vstack(df_train.PSD.values)
X_test = np.vstack(df_test.PSD.values)

print ('train #recs = ', len(X_train))
print ('test #recs = ', len(X_test))

# A quick result. Accuracy without and with metadata: hourly activity
# without metadata: 0.855331

# fit model to training PSD data
model = xgboost.XGBClassifier(n_estimators=650, learning_rate=0.2)
model.fit(X_train, y_train)
# make predictions for test data
y_pred = model.predict(X_test)
ac = accuracy_score(y_test, y_pred)
print("Name: %s, ac: %f" % ('XGBoost', ac))


# Lets repeat the same after appending the hour variable in the PSD

# In[ ]:


# Accuracy with metadata: 0.872483
X_train = np.column_stack((X_train, df_train.hour.values)) # append the hour variable in the PSD
X_test  = np.column_stack((X_test, df_test.hour.values))
model = xgboost.XGBClassifier(n_estimators=650, learning_rate=0.2)
model.fit(X_train, y_train)
# make predictions for test data
y_pred = model.predict(X_test)
ac = accuracy_score(y_test, y_pred)
print("Name: %s, ac: %f" % ('XGBoost with metadata', ac))


# Note that these mosquitoes are raised in the lab where artificial lighting and temperature-humidity conditions are automatically controlled. In real life the results would be even more prominent.
