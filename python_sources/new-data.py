import numpy as np
import pandas as pd
from sklearn import linear_model, datasets
import math
import scipy as sc
import itertools as it

#-----------------------------------------------------------
train = pd.read_csv("../input/train.csv")
test = pd.read_csv("../input/test.csv")
#-----------------------------------------------------------
#split Name into Title, FirstName and LastName

LastName=[]
Title=[]
#FirstName=[]
i=0
while i<891 :
    x = (train.Name[i])
    separator1 = (x.find(","))
    separator2 = (x.find("."))
    Title.append(x[separator1+2:separator2])
#    FirstName.append(x[separator2+2:])
    LastName.append(x[:separator1])
    i+=1
    
train['LastName'] = pd.Series(LastName, index=train.index)
train['Title'] = pd.Series(Title, index=train.index)
#train['FirstName'] = pd.Series(FirstName, index=train.index)
train = train.drop('Name', 1)

LastName=[]
Title=[]
# FirstName=[]
k=0
while k<418 :
    y = (test.Name[k])
    separator1 = (y.find(","))
    separator2 = (y.find("."))
    Title.append(y[separator1+2:separator2])
    # FirstName.append(y[separator2+2:])
    LastName.append(y[:separator1])
    k+=1
    
test['LastName'] = pd.Series(LastName, index=test.index)
test['Title'] = pd.Series(Title, index=test.index)
#test['FirstName'] = pd.Series(FirstName, index=test.index)
test = test.drop('Name', 1)
#-----------------------------------------------------------
# train = train.drop('Survived', 1)

# train = train.drop('Fare',1)
train = train.drop('Cabin',1)
# train = train.drop('Embarked',1)
train = train.drop('Ticket',1)
# train = train.drop('Title',1)

# test = test.drop('Fare',1)
test = test.drop('Cabin',1)
# test = test.drop('Embarked',1)
test = test.drop('Ticket',1)
# test = test.drop('Title',1)

#-----------------------------------------------------------
# all_data = all_data.fillna(method='ffill')

# Family = []
# i=0
# while i<len(test) :
#     x=int(test.SibSp[i:(i+1)])+int(test.Parch[i:(i+1)])
#     Family.append(x)
#     i+=1
# test['Family'] = pd.Series(Family, index=test.index)

# Family = []
# i=0
# while i<len(train) :
#     x=int(train.SibSp[i:(i+1)])+int(train.Parch[i:(i+1)])
#     Family.append(x)
#     i+=1
# print (Family)
# train['Family'] = pd.Series(Family, index=train.index)

train = train[train.PassengerId != 69]
train = train[train.PassengerId != 274]
train = train[train.PassengerId != 418]
train = train[train.PassengerId != 660]
train = train[train.PassengerId != 814]
train = train[train.PassengerId != 851]

# Siblings = [0,1,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,4,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,5,0,0,0,0,2,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,4,0,0,0,0,0,1,0,0,0,3,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1]
# test['Siblings'] = pd.Series(Siblings, index=test.index)
# Spouses = [0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0]
# test['Spouses'] = pd.Series(Spouses, index=test.index)
# Parents = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,1,0,2,0,0,0,1,0,2,0,2,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]
# test['Parents'] = pd.Series(Parents, index=test.index)
# Children = [0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,6,0,0,3,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,2,0,0,0,0,9,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,1,0,0,0,9,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]
# test['Children'] = pd.Series(Children, index=test.index)
# LastName = [645,546,848,1286,720,1166,260,183,10,305,575,615,1129,564,218,321,638,61,577,62,1037,899,389,1279,1045,1021,912,286,151,1073,736,590,317,611,818,635,1035,179,1079,525,632,414,457,267,655,952,228,1090,168,271,1126,988,546,405,763,1002,265,5,309,226,333,783,127,150,1045,268,171,826,1204,405,842,814,870,916,436,640,807,680,16,349,136,1157,213,324,679,650,92,80,891,1251,362,949,518,476,123,1175,215,756,152,854,1148,1249,395,604,1180,555,166,1044,1276,1167,1146,1093,379,167,1157,234,1182,1076,101,222,1245,652,818,212,646,277,157,780,145,967,1140,467,695,1180,335,201,1301,1084,350,459,459,297,1045,102,717,1223,541,303,275,673,986,772,1153,664,53,359,121,741,133,943,1128,1198,1291,946,962,657,153,398,214,529,729,1302,362,1195,53,161,1101,1148,104,254,784,254,769,684,346,774,976,305,1057,1228,45,1071,1211,728,352,629,1135,873,83,993,846,293,64,989,40,906,790,249,1032,323,28,387,316,564,30,522,752,1265,1269,1185,360,1000,263,630,192,835,59,795,380,550,1168,1275,1272,724,283,1229,1240,71,542,344,723,232,1135,571,611,648,631,352,552,650,1255,9,236,1069,1254,746,753,871,114,806,312,874,1251,664,984,744,230,1242,565,981,776,412,236,705,1052,164,932,384,1236,917,909,943,391,1198,1029,328,415,1129,765,403,1001,292,856,336,1288,44,686,1073,735,603,904,757,976,982,778,279,23,13,518,492,180,1227,1055,203,1264,481,1138,1025,618,590,37,669,864,1040,670,63,104,1033,238,375,300,358,1184,851,266,751,311,368,325,118,386,742,1057,197,1211,6,135,1259,443,1233,473,1151,330,533,317,619,680,732,895,718,1057,758,1237,1159,496,1057,194,1013,438,920,442,1284,579,495,336,144,657,270,543,53,889,396,1018,793,1261,533,49,51,191,921,942,725,2,441,657,1126,244,419,692,257,132,428,438,205,416,879,1236,1269,1016,943,859,810,531,1134,897,1056,1239,963]
# test['LastName'] = pd.Series(LastName, index=test.index)
Age=[34.5,47,62,27,22,14,30,26,18,21,35,46,23,63,47,24,35,21,27,45,55,9,35,21,48,50,22,22.5,41,36,50,24,33,45,30,18.5,35,21,25,35,39,35,41,30,45,25,45,35,60,36,24,27,20,28,35,10,35,25,35,36,17,32,18,22,13,35,18,47,31,60,24,21,29,28.5,35,32.5,35,55,30,24,6,67,49,35,35,35,27,18,35,2,22,35,27,35,25,25,76,29,20,33,43,27,35,26,16,28,21,35,35,18.5,41,35,36,18.5,63,18,35,1,36,29,12,28,35,28,35,17,22,19,42,24,32,53,45,18,43,24,26.5,26,23,40,10,33,61,28,42,31,35,22,35,30,23,35,60.5,36,13,24,29,23,42,26,35,7,26,35,41,26,48,18,35,22,35,27,23,35,40,15,20,54,36,64,30,37,18,35,27,40,21,17,10,40,34,35,11.5,61,8,33,6,18,23,35,35,0.33,47,8,25,35,35,24,33,25,32,35,17,60,17,42,35,57,50,35,30,21,22,21,53,40,23,35,40.5,36,14,21,21,35,39,20,64,20,18,48,55,45,45,35,21,41,22,42,29,35,0.92,20,27,24,32.5,35,35,28,19,21,36.5,21,29,1,30,35,35,35,35,17,46,35,26,23,35,20,28,40,30,22,23,0.75,35,9,2,36,35,24,35,35,35,30,35,53,36,26,1,29,30,29,32,35,43,24,35,64,30,0.83,55,45,18,22,35,37,55,17,57,19,27,22,26,25,26,33,39,23,12,46,29,21,48,39,35,19,27,30,32,39,25,35,18,32,35,58,16,16,26,38,24,31,45,25,18,49,0.17,50,59,35,35,30,14.5,24,31,27,25,36,35,22,45,29,21,31,49,44,54,45,22,21,55,5,35,26,35,19,35,24,24,57,21,6,23,51,13,47,29,18,24,48,22,31,30,38,22,17,43,20,23,50,35,3,35,37,28,35,39,38.5,35,12]
test['Age'] = pd.Series(Age, index=test.index)

test = test.drop('SibSp',1)
test = test.drop('Parch',1)
test = test.drop('PassengerId',1)
test = test.drop('LastName',1)

LastName = [154,283,527,425,21,827,777,921,605,857,1076,131,1080,30,1230,537,1002,1278,1223,771,427,111,789,1119,921,53,374,405,893,1191,1210,1138,450,1260,803,556,761,193,1223,868,971,1208,668,686,329,1024,705,892,1073,47,926,878,500,384,912,1289,1041,880,1255,459,1103,573,505,1109,1150,835,881,276,657,591,459,560,234,120,820,1142,839,183,347,1232,1091,785,204,574,72,398,1118,405,217,231,38,218,317,274,1094,453,473,340,625,968,969,1262,600,72,815,1070,834,997,828,985,1299,93,620,66,951,261,1208,96,30,538,825,857,1246,1262,868,792,749,963,367,351,242,1021,1249,1131,1008,108,425,910,440,136,882,484,169,39,300,32,398,860,175,94,947,801,1211,898,1279,448,269,1121,1057,277,1244,113,186,926,454,146,1109,95,727,1214,1002,605,1106,1122,664,695,578,486,707,1057,957,53,104,657,1028,884,1026,140,1205,979,196,592,860,159,743,802,899,747,1298,1220,1057,599,1295,243,959,72,15,202,130,19,188,956,449,652,865,559,582,98,506,1160,148,471,863,567,115,800,738,381,695,505,690,1108,53,713,498,552,251,955,570,1299,844,247,750,67,810,715,487,108,210,995,959,1147,730,1029,1198,1186,227,1235,935,1123,53,1170,509,532,996,926,959,468,126,181,1196,798,523,41,716,933,1002,2,355,902,315,343,1124,1143,314,849,562,259,90,124,711,480,813,712,490,23,1053,96,641,780,607,636,1280,23,390,953,7,413,517,1045,673,530,510,872,625,830,1265,1135,327,298,1116,183,1057,1294,883,85,454,544,780,937,468,1223,416,326,947,170,287,129,860,405,248,1086,411,160,1125,309,271,334,890,1283,368,47,1296,1221,146,424,788,819,1109,321,88,52,884,11,1240,838,596,68,496,1272,103,1014,921,803,683,1269,117,478,119,851,1189,556,980,301,459,172,1054,700,206,584,72,865,1076,601,903,791,919,1202,876,12,620,484,907,428,1268,1009,122,695,1085,511,810,285,1161,797,352,773,1215,437,225,1303,293,1029,1287,238,975,392,978,128,1187,736,623,1097,206,398,1009,405,671,510,489,971,999,598,336,798,1088,76,974,1255,482,404,451,950,583,808,648,1193,888,29,831,435,809,755,458,189,1120,1082,76,639,177,1255,597,1155,241,590,154,628,720,459,422,1039,1207,124,695,567,647,1133,271,482,1285,821,50,1144,1297,377,1092,23,1164,187,190,914,675,754,953,989,149,900,685,290,1247,787,1037,245,1234,704,1043,45,941,958,1231,672,544,634,382,1012,383,1072,546,989,1197,368,963,178,510,174,708,1017,419,279,30,30,99,344,867,99,918,454,300,1176,1089,886,694,894,1290,356,1019,1170,312,833,1105,877,1099,796,305,1154,921,339,617,508,680,393,642,1042,939,432,1097,194,622,232,1176,348,1034,940,1170,586,419,445,843,1015,377,372,140,222,1215,702,608,137,356,582,1115,504,1194,558,718,627,296,686,1095,30,585,844,561,158,533,293,730,104,434,1292,655,851,491,143,1163,662,734,134,887,91,740,1141,934,1109,308,701,251,926,1187,593,1068,1109,397,76,500,264,1100,1277,1145,817,340,624,896,526,538,992,140,365,416,81,250,246,720,538,173,1027,262,1173,161,518,816,1274,1243,364,1081,1206,459,197,966,514,905,459,161,686,926,289,388,748,331,632,677,1050,1248,223,643,841,1176,569,64,1096,88,430,492,832,644,182,240,835,775,663,1173,691,472,1132,376,1203,786,609,502,592,447,551,220,908,590,764,164,577,22,515,667,116,1201,1281,398,710,580,855,516,215,1045,793,1156,279,2,1102,769,258,1251,823,1219,616,533,487,199,82,1179,1036,431,875,87,206,366,41,156,762,828,475,714,595,745,370,546,847,1190,373,654,748,70,331,733,611,20,499,1107,1002,317,477,637,433,1057,568,299,915,693,911,572,1215,983,251,206,1180,524,602,43,973,805,220,17,709,1117,1192,423,528,758,554,1109,518,739,998,823,926,394,678,758,779,1152,1292,1009,1051,69,27,254,938,1104,229,766,18,840,1087,703,282,1,1057,767,502,451,1165,136,725,210,13,1265,291,76,994,492,442,1169,1057,446,176,360,1023,1218,605,84,108,200,1222,7,850,479,970,676,986,935,768,288,86,1162,1002,822,470,611,112,342]
train['LastName'] = pd.Series(LastName, index=train.index)
# Siblings=[1,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,0,1,0,2,0,4,0,0,1,0,0,0,0,1,5,0,0,0,3,0,1,0,0,2,0,5,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,1,0,1,0,0,0,0,0,4,2,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,1,3,0,0,0,8,0,4,2,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,1,0,0,0,0,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,1,3,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,5,0,0,0,0,3,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0]
# train['Siblings'] = pd.Series(Siblings, index=train.index)
# Spouses=[0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
# # train['Spouses'] = pd.Series(Spouses, index=train.index)
# Parents=[0,0,0,0,0,0,0,1,2,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,2,0,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,1,1,0,0,0,2,0,2,1,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,1,0,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,2,0,0,0,2,2,2,2,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0]
# train['Parents'] = pd.Series(Parents, index=train.index)
# Children=[0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,1,0,0,0,0,1,0,0,0,0,0,1,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,2,2,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,5,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,3,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,5,0,0,0,0,0]
# train['Children'] = pd.Series(Children, index=train.index)
Age=[22,38,26,35,35,35,54,2,27,14,4,58,20,39,14,55,2,35,31,35,35,34,15,28,8,38,35,19,35,35,40,52,35,66,28,42,35,21,18,14,40,27,35,3,19,35,26,35,34,18,7,21,49,29,65,35,21,28.5,5,11,22,38,45,4,35,13,29,19,26,32,16,21,26,32,25,35,35,0.83,30,22,29,35,28,17,33,45,35,23,24,29,20,46,26,59,35,71,23,34,34,28,35,21,33,37,28,21,35,38,18,47,14.5,22,20,17,21,70.5,29,24,2,21,35,32.5,32.5,54,12,35,24,10,45,33,20,47,29,25,23,19,37,16,24,34,22,24,19,18,19,27,9,36.5,42,51,22,55.5,40.5,35,51,16,30,35,4,44,40,26,17,1,9,42,45,35,28,61,4,1,21,56,18,14,50,30,36,6,35,9,1,4,35,34,45,40,36,32,19,19,3,44,58,35,42,35,24,28,2,34,45.5,18,2,32,26,16,40,24,35,22,30,34,31,27,42,32,30,16,27,51,35,38,22,19,20.5,18,17,35,29,59,5,24,35,44,8,19,33,18,19,29,22,30,44,25,24,37,54,35,29,62,30,41,29,35,30,35,50,35,3,52,40,35,36,16,25,58,35,35,25,41,35,63,45,35,7,35,65,28,16,19,35,33,30,22,42,22,26,19,36,24,24,35,23.5,2,35,50,35,23,19,35,35,0.92,35,17,30,30,24,18,26,28,43,26,24,54,31,40,22,27,30,22,8,36,61,36,31,16,25,45.5,38,16,50,35,29,41,45,45,2,24,28,25,36,24,40,35,3,42,23,35,15,25,35,28,22,38,35,35,40,29,45,35,34,30,60,35,35,24,25,18,19,22,3,27,22,27,20,19,42,1,32,35,35,18,1,36,35,17,36,21,28,23,24,22,31,46,23,28,39,26,21,28,20,34,51,3,21,21,35,35,33,35,44,35,34,30,10,35,21,29,28,18,35,28,19,35,32,28,35,42,17,50,14,21,24,64,31,45,20,25,28,35,4,13,34,5,52,36,35,30,49,35,29,65,39,50,35,48,34,47,48,35,38,35,56,35,0.75,35,38,33,23,22,35,34,29,22,2,9,35,50,63,25,19,35,58,30,9,35,21,55,71,21,35,54,35,25,24,17,21,35,37,16,18,33,35,28,26,29,35,36,54,24,47,34,35,36,32,30,22,35,44,35,40.5,50,35,39,23,2,35,17,40,30,7,45,30,35,22,36,9,11,32,50,64,19,35,33,8,17,27,35,22,22,62,48,35,39,36,35,40,28,35,35,24,19,29,35,32,62,53,36,35,16,19,34,39,35,32,25,39,54,36,35,18,47,60,22,35,35,52,47,8,37,36,35,49,35,49,24,35,35,44,35,36,30,27,22,40,39,35,24,35,35,24,34,26,4,26,27,42,20,21,21,61,57,21,26,35,80,51,32,35,9,28,32,31,41,29,20,24,2,35,0.75,48,19,56,35,23,35,18,21,35,18,24,35,32,23,50,40,47,36,20,32,25,35,43,46,40,31,70,31,35,18,24.5,18,43,36,35,27,20,14,60,25,14,19,18,15,31,4,35,25,60,52,44,35,49,42,18,35,18,25,26,39,45,42,22,12,24,35,48,29,52,19,38,27,35,33,6,17,34,50,27,20,30,35,25,25,29,11,35,23,23,28.5,48,35,35,35,35,36,21,24,31,70,16,30,19,31,4,6,33,23,48,0.67,28,18,34,33,35,41,20,36,16,51,35,30.5,25,32,24,48,57,35,54,18,35,5,35,43,13,17,29,45,25,25,18,8,1,46,35,16,7,35,25,39,49,31,30,30,34,31,11,0.42,27,31,39,18,39,33,26,39,35,30.5,35,23,31,43,10,52,27,38,27,2,35,35,1,35,62,15,0.83,35,23,18,39,21,35,32,35,20,16,30,34.5,17,42,5,35,28,49,74,9,16,44,18,45,51,24,35,41,21,48,1,24,42,27,31,35,4,26,47,33,47,28,15,20,19,35,56,25,33,22,28,25,39,27,19,21,26,32]
train['Age'] = pd.Series(Age, index=train.index)

def rebuild_data(a):
    i=0
    while i<len(a):
        if a[i]>0:
            a[i]=1
        else:
            a[i]=0
        i+=1
    return a    
        
Family=[1,1,0,1,0,0,0,4,2,1,2,0,0,6,0,0,5,0,1,0,0,0,0,0,4,6,0,5,0,0,0,1,0,0,1,1,0,0,2,1,1,1,0,3,0,0,1,0,2,1,5,0,1,1,1,0,0,0,3,7,0,0,1,5,0,2,0,0,2,0,7,0,1,0,0,0,0,2,0,0,0,0,0,0,3,4,0,5,0,0,0,1,3,0,0,0,1,1,1,0,0,1,0,2,0,0,0,0,1,0,1,0,1,0,0,0,1,1,6,2,0,1,0,1,1,0,0,2,0,0,0,1,1,0,0,2,1,0,0,2,0,1,0,0,2,0,4,2,0,0,1,0,2,0,1,0,0,0,10,1,0,0,0,5,2,1,5,0,0,0,5,2,0,0,2,4,0,0,0,10,0,6,3,2,0,1,0,2,0,0,0,1,2,0,0,0,1,0,0,0,10,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,4,1,0,0,6,0,0,1,2,0,0,1,1,0,0,0,2,0,1,2,1,0,2,0,1,2,2,0,0,0,1,0,6,2,0,0,0,5,1,1,0,0,0,1,0,1,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,0,1,0,2,0,0,0,3,0,1,1,0,0,4,1,0,2,0,1,0,2,2,0,0,0,2,10,0,0,0,2,1,2,0,1,2,1,0,1,0,0,0,2,5,0,0,0,0,0,1,2,0,0,0,2,1,0,0,1,0,0,0,5,1,1,0,1,0,1,0,0,0,1,1,0,0,4,1,0,2,0,0,0,2,0,1,0,0,7,0,0,0,3,0,2,1,2,0,0,0,0,0,0,0,1,1,0,1,0,2,0,4,0,0,1,0,0,0,2,0,2,0,0,0,2,2,0,1,0,0,0,0,1,1,0,1,3,4,5,5,0,2,0,1,0,0,2,1,0,3,0,3,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,0,1,1,0,1,7,0,0,0,1,4,1,0,0,2,1,0,0,0,0,0,1,0,3,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,3,2,0,2,2,0,2,0,0,0,2,2,6,6,1,1,0,1,0,2,2,2,0,0,0,0,0,1,0,2,1,0,0,0,0,0,2,0,4,0,0,0,2,0,0,0,0,0,1,1,0,2,2,0,0,0,2,0,2,0,0,0,1,0,2,1,2,0,0,0,1,3,0,0,0,0,1,0,0,3,0,6,0,1,0,0,3,2,1,3,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,5,0,0,2,5,1,0,0,5,0,3,1,0,0,0,0,0,1,0,0,0,2,0,2,0,2,0,0,0,1,2,0,0,0,1,2,1,0,0,0,0,0,0,7,1,0,0,0,7,2,3,5,0,0,1,1,1,0,0,0,0,0,0,2,0,1,0,1,0,1,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,3,0,1,1,0,0,0,0,0,0,4,0,0,0,0,1,4,1,0,2,2,0,1,0,2,1,0,0,3,1,0,0,0,0,0,0,0,3,0,1,0,0,1,0,0,0,0,0,4,0,0,0,0,1,0,1,0,3,0,0,0,5,3,0,0,0,10,0,0,0,0,0,0,2,0,2,3,1,0,0,0,0,0,1,0,0,0,0,0,0,2,0,5,2,0,0,1,5,0,0,2,0,0,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,10,0,1,1,0,2,1,1,1,2,0,3,0,2,1,0,10,0,0,1,0,0,2,0,2,0,0,1,0,0,0,0,1,1,0,0,0,0,5,0,0,3,0,0]
train['Family'] = pd.Series((rebuild_data(Family)), index=train.index)

Family = [0,1,0,0,2,0,0,2,0,2,0,0,1,1,1,1,0,0,1,0,1,1,0,1,4,1,1,0,0,2,1,2,3,3,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,2,1,0,3,5,0,5,0,0,1,0,0,0,0,0,4,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,2,1,0,0,0,1,0,0,0,2,1,0,3,0,0,0,1,0,0,0,1,1,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,2,0,1,0,1,1,0,0,1,0,2,0,0,0,0,4,1,0,0,0,0,0,7,7,0,4,0,0,3,0,0,0,1,1,0,0,2,6,0,0,0,0,2,0,2,0,0,0,2,0,4,0,0,0,0,1,0,6,2,0,1,3,2,0,2,1,0,0,0,1,2,10,0,1,0,2,0,2,0,2,0,0,0,0,2,1,2,0,0,0,0,0,0,0,0,0,1,6,0,0,2,2,0,1,0,0,0,0,2,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,2,2,0,3,1,0,2,1,1,3,0,1,0,0,0,0,0,0,0,1,0,2,2,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,2,0,2,2,0,0,1,0,0,0,0,0,2,0,0,3,2,0,0,0,0,1,0,0,2,3,1,2,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,3,0,1,0,2,0,0,2,0,0,0,2,0,0,0,0,10,1,2,0,0,0,0,0,1,0,0,3,3,0,2,0,0,1,10,2,0,0,1,10,1,0,1,0,1,0,0,0,2,0,2,0,0,6,0,0,0,1,0,3,0,0,0,4,0,1,2,0,4,1,0,2,0,0,0,1,1,0,1,0,1,2,0,2,0,1,0,0,0,0,0,2]
test['Family'] = pd.Series((rebuild_data(Family)), index=test.index)

train = train.drop('SibSp',1)
train = train.drop('Parch',1)
train = train.drop('PassengerId',1)
train = train.drop('LastName',1)

def rename(a):
    a = np.array(a)
    dictionary=[] 
    indexnew=[]
    i=0
    while i<len(a):
        if a[i] not in dictionary:
            dictionary.append(a[i])
            indexnew.append(i)
        else:
            indexnew.append(dictionary.index(a[i]))
        i+=1
    return indexnew
    
train['Sex'] = pd.Series(rename(train['Sex']), index=train.index)
test['Sex'] = pd.Series(rename(test['Sex']), index=test.index)
train['Title'] = pd.Series(rename(train['Title']), index=train.index)
test['Title'] = pd.Series(rename(test['Title']), index=test.index)
train['Embarked'] = pd.Series(rename(train['Embarked']), index=train.index)
test['Embarked'] = pd.Series(rename(test['Embarked']), index=test.index)

print (train)

#-----------------------------------------------------------

train = train.iloc[np.random.permutation(len(train))]

train = train.dropna()
test = test.fillna(method='ffill')

train_survived = train.Survived
train = train.drop('Survived', 1)

train = np.array(train)
test = np.array(test)
train_survived = np.array(train_survived)

#-----------------------------------------------------------

from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()

train1 = train[:713]
train1_labels = train_survived[:713]
test1 = train[713:]
test1_labels = train_survived[713:]

clf.fit(train1, train1_labels)
predict = clf.predict(test1)
print (clf.score(test1, test1_labels))
clf.fit(train, train_survived)
print (clf.score(train, train_survived))
print (clf.predict(test))

#-----------------------------------------------------------

from sklearn import svm
from sklearn.metrics import accuracy_score
clf = svm.SVC()

train1 = train[:713]
train1_labels = train_survived[:713]
test1 = train[713:]
test1_labels = train_survived[713:]

clf.fit(train1, train1_labels)
predict = clf.predict(test1)
print (clf.score(test1, test1_labels))
clf.fit(train, train_survived)
print (clf.score(train, train_survived))
print (clf.predict(test))

#-----------------------------------------------------------
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators=10, min_samples_split=10, max_depth=8, min_samples_leaf=5)

train1 = train[:713]
train1_labels = train_survived[:713]
test1 = train[713:]
test1_labels = train_survived[713:]

clf.fit(train1, train1_labels)
predict = clf.predict(test1)
print (clf.score(test1, test1_labels))
clf.fit(train, train_survived)
print (clf.score(train, train_survived))
print (clf.predict(test))

#-----------------------------------------------------------

from sklearn import tree
clf = tree.DecisionTreeClassifier(min_samples_split=10, max_depth=8)

train1 = train[:713]
train1_labels = train_survived[:713]
test1 = train[713:]
test1_labels = train_survived[713:]

clf.fit(train1, train1_labels)
predict = clf.predict(test1)
print (clf.score(test1, test1_labels))
clf.fit(train, train_survived)
print (clf.score(train, train_survived))
print (clf.predict(test))

#-----------------------------------------------------------

clf = linear_model.LogisticRegression(C=10)

train1 = train[:713]
train1_labels = train_survived[:713]
test1 = train[713:]
test1_labels = train_survived[713:]

clf.fit(train1, train1_labels)
predict = clf.predict(test1)
print (clf.score(test1, test1_labels))
clf.fit(train, train_survived)
print (clf.score(train, train_survived))
print (clf.predict(test))