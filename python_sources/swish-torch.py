ALL = ['Swish','SwishFunction','swish','__version__']
from base64 import b64decode
from zlib import decompress
import torch
from torch.utils.cpp_extension import load_inline

__version__='0.0.1'

def load_module():
    cpp_comp = ['eNrNVE2P2jAQvedXjKiEQkXJcg3blShQ7apdqApI7SkyzkAsQhz5g+1utf+9jhNDUmBbtT30BPHMvPdm/DxeEMB7wXcQJHyHgZYoghj3gXxgMnmjuKBJQKWg5UGP5rnnea9YRlMdI1yXCfhNYSYZz3rJjaclyzaQkR3KnFCE/HHFsrjfD8OUKRQklQPPK1i5eCAihhhpSgRRphz4GrYoMkylt+csBksarcvMiOqY+JYxDBeGkAtoc61yrbpAeSYV/BRkmYl1BnWsFaHbi2AbQeLIFL0EdyFmS7ll8xohr9GD/2tgosKQ58U4SHrdSLyBggC+ewBEKw62LCJiA2+biEOx8SvMlv1tdeHKKANga/APIBUMvwzymlsMbhH6FgFcFk2QbufmmhePOfqtRpsm+yCu6wgulM/Z0++XP7veuZFrAr09STVGXLirxF2uHqOUbbGcQMeWGXRFEyiPesbfjKLf6alCeccNgxKJQPtXYbgdLcfD0B7COQ/ySl/VEcBKINmWHzGuiU6Vq17MPo9uo9HtZPTBXxvvoxnnMpM6z7lQWLi/0AKFki7IhOs0hhVCIQBWWsGGK3DjOBHuJiJQaWFez8B7Pu8+53r/z339V7azdQ7qUqmLm2r39+C6lzznmmu6ps5WPMq6CJN2FHDimH9jmOaiOW6WakC1ffE/WcjptE769PXd3XTc70f3s/Hy48QvhUy+LCbT+d1sGk2H95Mu7Mpx7Az0+vQdtxsHRvm8+AZCFduXO/+YW5kmItXKiYi5pUynaa6EFdrgqF17u3lyjqWWXac5GC0inaLnH0CgXH0=']
    cu_comp  = ['']
    cpp_srcs = [decompress(b64decode(src)).decode() for src in cpp_comp]
    cu_srcs = [decompress(b64decode(src)).decode() for src in cu_comp]

    swish_mod = load_inline("swish_torch_inline", cpp_sources=cpp_srcs, cuda_sources=cu_srcs, extra_cuda_cflags=['--expt-extended-lambda'])
    return swish_mod

if not torch.cuda.is_available():
    print("CUDA not available but is required for swish_torch")
    swish_mod = None
else:
     swish_mod = load_module()

class SwishFunction(torch.autograd.Function):
    @staticmethod
    def forward(ctx, inp):
        ctx.save_for_backward(inp)
        return swish_mod.swish_forward(inp)
    
    @staticmethod
    def backward(ctx, grad_out):
        inp, = ctx.saved_tensors
        if not ctx.needs_input_grad[0]: return (None,)
        return swish_mod.swish_backward(inp, grad_out)
        
class Swish(torch.nn.Module):
    '''Swish Activation Function - Inline PyTorch CUDA Version'''
    def forward(self, inp): return SwishFunction.apply(inp)

swish = SwishFunction.apply

if swish_mod is not None:
    print(f"Successfully loaded swish-torch inline version {__version__}")