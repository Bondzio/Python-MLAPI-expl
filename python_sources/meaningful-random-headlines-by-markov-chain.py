#!/usr/bin/env python
# coding: utf-8

# Natural Language Generation is a very important area to be explored in our time. It forms the basis of how a bot would communicate with - not like how literates write books but like how we talk. In this Kernel, I'd like to show you a very simple but powerful Python module that does a similar exercise in (literally) a couple of lines of code. 
# 
# **Module: Markovify**
# 
# The Py module we use here is [`markovify`](https://github.com/jsvine/markovify).
# 
# can be installed using *pip* 
# 
# `pip install markovify`
# 
# **Descrption of Markovify: **
# 
# Markovify is a simple, extensible Markov chain generator. Right now, its main use is for building Markov models of large corpora of text, and generating random sentences from that. But, in theory, it could be used for other applications.
# 
# **About the Dataset:**
# This includes the entire corpus of articles published by the ABC website in the given time range. With a volume of 200 articles per day and a good focus on international news, we can be fairly certain that every event of significance has been captured here. This dataset can be downloaded from [Kaggle Datasets](https://www.kaggle.com/therohk/million-headlines/data).

# ### Little About Markov Chain
# 
# Markov chains, named after Andrey Markov, are mathematical systems that hop from one "state" (a situation or set of values) to another. For example, if you made a Markov chain model of a baby's behavior, you might include "playing," "eating", "sleeping," and "crying" as states, which together with other behaviors could form a 'state space': a list of all possible states. In addition, on top of the state space, a Markov chain tells you the probabilitiy of hopping, or "transitioning," from one state to any other state---e.g., the chance that a baby currently playing will fall asleep in the next five minutes without crying first. Read more about how Markov Chain works in this [interactive article](http://setosa.io/ev/markov-chains/) by Victor Powell
# 
# #![Markov Chain](https://cdn-images-1.medium.com/max/800/1*MbHRwYNA8F29hzes8EPHiQ.gif)
# 
# Image Credit: https://hackernoon.com/from-what-is-a-markov-model-to-here-is-how-markov-models-work-1ac5f4629b71

# ### Loading Required Packages

# In[ ]:



import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import markovify #Markov Chain Generator


# ### Reading Input Text File

# In[ ]:


inp = pd.read_csv('../input/abcnews-date-text.csv')

inp.head(5)


# ### Sample Headlines

# In[ ]:


import random
inp.headline_text[random.sample(range(100), 10)]


# ### Building the text model with Markov Chain

# In[ ]:


text_model = markovify.NewlineText(inp.headline_text, state_size = 2)


# ### Time for some fun with Autogenerated Headlines

# In[ ]:


# Print ten randomly-generated sentences using the built model
for i in range(10):
    print(text_model.make_sentence())


# ### Markov Chain Model with Different State Size 

# In[ ]:


text_model1 = markovify.NewlineText(inp.headline_text, state_size = 3)
text_model2 = markovify.NewlineText(inp.headline_text, state_size = 4)


# In[ ]:


# Print three randomly-generated sentences using the built model
for i in range(5):
    print(text_model1.make_sentence())


# In[ ]:


# Print three randomly-generated sentences using the built model
for i in range(10):
    temp = text_model2.make_sentence()
    if temp is not None: #escpaing None with this if condition as higher state markov model has generated more Nones
        print(temp)


# ### Ensembling Markov Chain Models

# In[ ]:


text_model11 = markovify.NewlineText(inp.headline_text, state_size = 2)
text_model12 = markovify.NewlineText(inp.headline_text, state_size = 2)
model_combo = markovify.combine([ text_model11, text_model12 ], [ 1.5, 1 ])
# Print three randomly-generated sentences using the built model
for i in range(5):
    print(text_model11.make_sentence())


# ### Potential Applications 
# 
# Now, this text could become input for a Twitter Bot, Slack Bot or even a Parody Blog. And that's the point.

# References to more Markovify examples: [https://github.com/jsvine/markovify#markovify-in-the-wild](https://github.com/jsvine/markovify#markovify-in-the-wild)
