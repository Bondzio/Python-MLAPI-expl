#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
import random
import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.


# ## Microsoft Malware Detection -> 
# 
# It is one the most challenging and huge dataset for data scientists. 
# Train Data ->  (4.08 GB)
# Test Data -> (3.54 GB)
# 
# Such a Huge Data set first will try to load only 1% of  sample data and see the nature of training data

# ## **Load Data**[](http://)

# In[ ]:


get_ipython().run_cell_magic('time', '', "p = 0.1 ## 10% of the random data\ndfsample = pd.read_csv('../input/train.csv' , skiprows=lambda i: i>0 and random.random() > p)\nprint(dfsample.shape)")


# In[ ]:


dfsample.head()


# ## We can see data set has 83 ->  Columns and around -> 8921483 rows with mix of Categorical and Numeric Variables -> 
# ### In order to load such a huge data set we need to manually assign data type to each variable for efficient Memory Management 

# In[ ]:


dfsample.dtypes


# ## Let's convert data type object to category and numeric to int8, int16 and int32 for efficient memory managment. 

# In[ ]:


dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }


# In[ ]:


del dfsample


# In[ ]:


get_ipython().run_cell_magic('time', '', "df_train = pd.read_csv('../input/train.csv' , dtype= dtypes)\nprint(df_train.shape)")


# In[ ]:


df_train.iloc[:,:-1].tail()


# In[ ]:


get_ipython().run_cell_magic('time', '', "df_test = pd.read_csv('../input/test.csv' , dtype= dtypes)\nprint(df_test.shape)\n#print(df_test.isna().sum())")


# In[ ]:


df_test.head()


# ### Let's Join train & test Data set for efficient Data Prepocessing -> 

# In[ ]:


#df_train1 = df_train.iloc[:,:-1]


# In[ ]:


#%%time
#df_join = df_train1.append(df_test)


# In[ ]:


#df_join.head()


# In[ ]:


#df_train.describe().T 


# In[ ]:


#df_train.isna().sum()


# ## EDA 

# In[ ]:


#df_train.HasDetections.value_counts()


# In[ ]:


#df_train.corr() 


# In[ ]:


#import seaborn as sns
#sns.heatmap(df_train.corr() )


# ## Data PreProcessing 

# In[ ]:


## Removing columns having more than 50% values as null
for i in df_train.columns:
        #print(dfsample[i].isna().sum())
        if df_train[i].isna().sum() > (df_train.shape[0]/2):
            print(i)
            df_train.drop(i, inplace = True , axis =1)
print(df_train.shape)            


# In[ ]:


for i in df_train.columns:
    if df_train[i].dtypes in ['int8','int16','float16','float32']:
        #print(i, df_train[i].mean())
        df_train[i].fillna(df_train[i].mean(), inplace = True)
    else:
        #print(i, df_train[i].mode())
        df_train[i].fillna(df_train[i].mode(), inplace = True)


# In[ ]:


df_train.head()


# In[ ]:


for i in df_train.columns:
        if df_train[i].isna().sum() >0 :
            print(i)
            df_train.drop(i, inplace = True , axis =1)
print(df_train.shape)            


# In[ ]:


df_train.describe().T


# In[ ]:


from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for i in df_train.columns:
    if df_train[i].dtypes not in ['int8','int16','float16','float32']:
        print(i)
        print(len(df_train[i].unique()))
        if len(df_train[i].unique()) > 50:
            df_train.drop(i, inplace = True , axis =1)
        else:
            df_train[i] = le.fit_transform(df_train[i])


# In[ ]:


## Let's remove that column which has high number of unique categories 


# In[ ]:


df_train['HasDetections'].value_counts()


# ## Modeling 

# In[ ]:


from sklearn.model_selection import train_test_split
X = df_train.drop(['HasDetections'], axis =1)
y = df_train['HasDetections']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)


# ## Logistic Regression

# In[ ]:


from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train, y_train)
lr.score(X_train, y_train)


# In[ ]:


lr.score(X_test, y_test)


# ## DT 

# In[ ]:


from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
print("Training Accuracy",dt.score(X_train, y_train))
print("Test Accuracy",dt.score(X_test, y_test))


# ## Naive Bayes

# In[ ]:


from sklearn.naive_bayes import GaussianNB
gb = GaussianNB()
gb.fit(X_train, y_train)
print("Training Accuracy",gb.score(X_train, y_train))
print("Test Accuracy",gb.score(X_test, y_test))


# ## SVM

# In[ ]:


from sklearn.svm import SVC
#clf = SVC()
#clf.fit(X_train, y_train)
#print("Training Accuracy",clf.score(X_train, y_train))
#print("Test Accuracy",clf.score(X_test, y_test))


# ## Ensemble - RandomForestClassifier

# In[ ]:


from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=10, max_depth=None, min_samples_split=2, random_state=0)
rfc.fit(X_train, y_train)
print("Training Accuracy",rfc.score(X_train, y_train))
print("Test Accuracy",rfc.score(X_test, y_test))


# In[ ]:


## Ensemble - RandomForestClassifier


# In[ ]:


from sklearn.ensemble import GradientBoostingClassifier
clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,max_depth=1, random_state=0).fit(X_train, y_train)
clf.score(X_train, y_train)
clf.score(X_test, y_test)


# In[ ]:




